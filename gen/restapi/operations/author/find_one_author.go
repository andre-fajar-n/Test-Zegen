// Code generated by go-swagger; DO NOT EDIT.

package author

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"zegen/gen/models"
)

// FindOneAuthorHandlerFunc turns a function with the right signature into a find one author handler
type FindOneAuthorHandlerFunc func(FindOneAuthorParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn FindOneAuthorHandlerFunc) Handle(params FindOneAuthorParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// FindOneAuthorHandler interface for that can handle valid find one author params
type FindOneAuthorHandler interface {
	Handle(FindOneAuthorParams, *models.Principal) middleware.Responder
}

// NewFindOneAuthor creates a new http.Handler for the find one author operation
func NewFindOneAuthor(ctx *middleware.Context, handler FindOneAuthorHandler) *FindOneAuthor {
	return &FindOneAuthor{Context: ctx, Handler: handler}
}

/*
	FindOneAuthor swagger:route GET /v1/author/{author_id} author findOneAuthor

# Find One

Find one author
*/
type FindOneAuthor struct {
	Context *middleware.Context
	Handler FindOneAuthorHandler
}

func (o *FindOneAuthor) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFindOneAuthorParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
