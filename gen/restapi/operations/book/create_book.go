// Code generated by go-swagger; DO NOT EDIT.

package book

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"zegen/gen/models"
)

// CreateBookHandlerFunc turns a function with the right signature into a create book handler
type CreateBookHandlerFunc func(CreateBookParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateBookHandlerFunc) Handle(params CreateBookParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateBookHandler interface for that can handle valid create book params
type CreateBookHandler interface {
	Handle(CreateBookParams, *models.Principal) middleware.Responder
}

// NewCreateBook creates a new http.Handler for the create book operation
func NewCreateBook(ctx *middleware.Context, handler CreateBookHandler) *CreateBook {
	return &CreateBook{Context: ctx, Handler: handler}
}

/*
	CreateBook swagger:route POST /v1/book book createBook

# Create

Create book
*/
type CreateBook struct {
	Context *middleware.Context
	Handler CreateBookHandler
}

func (o *CreateBook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateBookParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
